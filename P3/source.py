import numpy as np
from scipy.optimize import linprog
import sys
sys.setrecursionlimit(100000)


def main(main_table):
    table1 = main_table[0]
    table2 = main_table[1]
    table3 = main_table[2]
    n = len(table1)
    m = len(table1[0])
    p = len(table2[0])
    table = [[0 for j in range(n + m + p)] for i in range(n + m + p)]
    for i in range(n):
        for j in range(n):
            table[i][j] = [0, 0]
        for j in range(n, n + m):
            table[i][j] = table1[i][j-n]
        for j in range(n + m, n + m + p):
            table[i][j] = table2[i][j-n-m]
    for i in range(n, n + m):
        for j in range(n):
            table[i][j] = [table1[j][i-n][1], table1[j][i-n][0]]
        for j in range(n, n + m):
            table[i][j] = [0, 0]
        for j in range(n + m, n + m + p):
            table[i][j] = table3[i-n][j-n-m]
    for i in range(n + m, n + m + p):
        for j in range(n):
            table[i][j] = [table2[j][i-n-m][1], table2[j][i-n-m][0]]
        for j in range(n, n + m):
            table[i][j] = [table3[j-n][i-n-m][1], table3[j-n][i-n-m][0]]
        for j in range(n + m, n + m + p):
            table[i][j] = [0, 0]
    return solver(table, n, m, p)


def solver(table, n, m, p):
    c = [-1.0, -1.0, -1.0]
    c += [0.0 for i in range(n + m + p)]

    C_eq = []
    A_eq =[]
    C_ub = []
    A_ub = []

    eq = [0.0, 0.0, 0.0]
    eq += [1.0 for i in range(n)]
    eq += [0.0 for i in range(m)]
    eq += [0.0 for i in range(p)]
    A_eq.append(eq)
    C_eq += [1]

    eq = [0.0, 0.0, 0.0]
    eq += [0.0 for i in range(n)]
    eq += [1.0 for i in range(m)]
    eq += [0.0 for i in range(p)]
    A_eq.append(eq)
    C_eq += [1]

    eq = [0.0, 0.0, 0.0]
    eq += [0.0 for i in range(n)]
    eq += [0.0 for i in range(m)]
    eq += [1.0 for i in range(p)]
    A_eq.append(eq)
    C_eq += [1]

    for j in range(n):
        ub = [1.0, 0.0, 0.0]
        for i in range(n + m + p):
            ub += [-table[i][j][0]]
        A_ub.append(ub)
        C_ub += [0.0]

    for j in range(n, n + m):
        ub = [0.0, 1.0, 0.0]
        for i in range(n + m + p):
            ub += [-table[i][j][0]]
        A_ub.append(ub)
        C_ub += [0.0]

    for j in range(n + m, n + m + p):
        ub = [0.0, 0.0, 1.0]
        for i in range(n + m + p):
            ub += [-table[i][j][0]]
        A_ub.append(ub)
        C_ub += [0.0]

    for i in range(3, n + m + p + 3):
        ub = [-1.0 if i == j else 0.0 for j in range(n + m + p + 3)]
        A_ub.append(ub)
        C_ub += [0.0]

    res = linprog(c=c, A_ub=A_ub, b_ub=C_ub, A_eq=A_eq, b_eq=C_eq, method='interior-point', bounds=(-50, 50))
    if res.success:
        p1_strategy = list(res.x[3: n + 3])
        p2_strategy = list(res.x[3 + n: n + m + 3])
        p3_strategy = list(res.x[3 + n + m: n + m + p + 3])
        return [p1_strategy, p2_strategy, p3_strategy]


# print(main([[[2, -2], [-3, 3]], [[-3, 3], [2, -2]]], [[[4, -4], [-1, 1], [-3, 3]], [[-4, 4], [1, -1], [3, -3]]], [[[-5, 5], [2, -2], [3, -3]], [[5, -5], [-2, 2], [-3, 3]]]))
# print(main([[[[-21, 21], [21, -21]], [[-48, 48], [-42, 42]]], [[[-24, 24], [45, -45]], [[-32, 32], [10, -10]]], [[[-39, 39], [18, -18]], [[40, -40], [-17, 17]]]]))
# print(main([[[[-8, 8], [-6, 6]], [[39, -39], [47, -47]], [[18, -18], [0, 0]]], [[[-6, 6], [-11, 11], [2, -2]], [[-1, 1], [-9, 9], [16, -16]], [[-38, 38], [22, -22], [-15, 15]]], [[[27, -27], [1, -1], [42, -42]], [[49, -49], [-32, 32], [10, -10]]]]))
# print(main([[[[-17, 17], [48, -48], [-29, 29], [33, -33], [-32, 32], [28, -28], [-39, 39], [-4, 4], [-36, 36]], [[-34, 34], [-9, 9], [-50, 50], [-14, 14], [47, -47], [-37, 37], [-22, 22], [-34, 34], [35, -35]], [[48, -48], [-28, 28], [-32, 32], [-27, 27], [-23, 23], [34, -34], [34, -34], [-12, 12], [-30, 30]], [[-25, 25], [34, -34], [37, -37], [-48, 48], [17, -17], [-39, 39], [8, -8], [13, -13], [31, -31]], [[35, -35], [-43, 43], [16, -16], [-7, 7], [49, -49], [-37, 37], [-50, 50], [27, -27], [28, -28]], [[-8, 8], [-15, 15], [44, -44], [-12, 12], [43, -43], [-39, 39], [13, -13], [-31, 31], [33, -33]], [[0, 0], [-26, 26], [25, -25], [23, -23], [3, -3], [-19, 19], [-23, 23], [-40, 40], [48, -48]], [[31, -31], [43, -43], [5, -5], [-3, 3], [30, -30], [16, -16], [-24, 24], [4, -4], [-47, 47]], [[25, -25], [8, -8], [-20, 20], [-17, 17], [-37, 37], [22, -22], [48, -48], [48, -48], [22, -22]]], [[[38, -38], [-24, 24], [-50, 50], [-46, 46], [-8, 8], [19, -19]], [[44, -44], [2, -2], [-38, 38], [-8, 8], [5, -5], [-5, 5]], [[17, -17], [35, -35], [-32, 32], [2, -2], [-19, 19], [-39, 39]], [[-23, 23], [7, -7], [29, -29], [-34, 34], [19, -19], [-13, 13]], [[27, -27], [6, -6], [35, -35], [-26, 26], [-41, 41], [-2, 2]], [[4, -4], [-43, 43], [-46, 46], [-48, 48], [36, -36], [41, -41]], [[-24, 24], [49, -49], [13, -13], [-44, 44], [39, -39], [-9, 9]], [[45, -45], [-38, 38], [5, -5], [41, -41], [25, -25], [4, -4]], [[37, -37], [-2, 2], [-32, 32], [11, -11], [-16, 16], [-23, 23]]], [[[24, -24], [16, -16], [-40, 40], [-24, 24], [40, -40], [10, -10]], [[-15, 15], [17, -17], [20, -20], [34, -34], [-8, 8], [47, -47]], [[25, -25], [-8, 8], [33, -33], [-47, 47], [-3, 3], [-32, 32]], [[24, -24], [42, -42], [-14, 14], [-9, 9], [42, -42], [-15, 15]], [[-9, 9], [4, -4], [25, -25], [37, -37], [47, -47], [-7, 7]], [[-10, 10], [48, -48], [19, -19], [34, -34], [-16, 16], [-49, 49]], [[-3, 3], [-46, 46], [-44, 44], [-23, 23], [-37, 37], [-24, 24]], [[-35, 35], [-17, 17], [-33, 33], [-22, 22], [41, -41], [23, -23]], [[28, -28], [-41, 41], [-35, 35], [-5, 5], [-42, 42], [41, -41]]]]))